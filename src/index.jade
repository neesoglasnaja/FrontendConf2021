include ./blocks/slide.jade
include ./blocks/cover.jade
include ./blocks/quote.jade
include ./blocks/frame.jade

- var title = "Тебе не нужен Bootstrap! Или нужен? Или все же не нужен?"

doctype html
html(lang='ru')
  head
    title !{title}
    meta(charset='utf-8')
    meta(http-equiv='x-ua-compatible', content='ie=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='shower/themes/ribbon/styles/screen-16x9.css')
    link(rel="stylesheet" href="vendor/highlight.github.css")
    link(rel='stylesheet', href='theme.css')
    link(rel='stylesheet', href='slides.css')
  body.shower.list
    header.caption
      h1 !{title}
    +slide({name: 'cover', classes:'cover'})
      h2.label(style="margin-top: 50px;") Тебе не нужен Bootstrap!
      p(style="font-size: 2em") Или нужен? Или все же не нужен?
      p(style="opacity: 0.8; margin-top: 155px") Александра Шинкевич
        br
        a(href='https://twitter.com/neesoglasnaja' target="_blank") @neesoglasnaja
      +cover('pictures/cover.jpg')
    +slide({header: "", classes: ""})
      div(style="margin-left: 50%; width: 60%; margin-top: 0px")
        h2.label Кто я?
        ul
          li Верстала еще на таблицах
          li Была начальником отдела фронтенда
          li Выгорела и уволилась
          li Счастливая безработная
        ul.next.no-style(style="position: absolute; background-color: white; top: 164px;")
          li.empty Верстала еще на таблицах
          li.empty Была начальником отдела фронтенда
          li.empty Выгорела и уволилась
          li.empty(style="text-decoration: line-through") Счастливая безработная
          li Lead Frontend Developer в Expert Soft
        p(style="margin-top: 100px")
          img.logo(src="pictures/minskcss.png")
          img.logo(src="pictures/minskjs.png")
          img.logo(src="pictures/css-minsk-js.svg", style="background-color: #2b2727; height: 75px")
      +cover('pictures/me.jpg')
    +slide({header: "", classes: ""})
      h2.label О чем расскажу
      ul
        li Что такое Bootstrap
        li Плюсы и минусы UI библиотек
        li Как сделать свой Bootstrap
    +slide({header: "", classes: ""})
      +cover('pictures/bootstrap.jpg')
    +slide({header: "", classes: ""})
      h2.label Bootstrap - это...
      ul
        li Библиотека компонентов
        li CSS фреймворк
        li UI библиотека
    +slide({header: "", classes: ""})
      h2.label Зачем появился?
      p Чтобы унифицировать интерфейс одной отдельно взятой компании
      p Уход из твиттера - https://blog.getbootstrap.com/2012/09/29/onward/
    +slide({header: "", classes: ""})
      h2.label Почему Bootstrap популярен
      ul
        li Просто, быстро и удобно копипастить
        li.next Большой набор базовых компонентов
        li.next Выглядит презентабельно из коробки
        li.next Только HTML, CSS и JS (jQuery)
    +slide({header: "", classes: ""})
      h2.label Мой первый сайт на Bootstrap 2
      h2.label.next 2013
      a.copyright(href="http://3d.miu.by/") http://3d.miu.by/
      +cover('pictures/miu.jpg')
    +slide({header: "", classes: ""})
      h2.label Версии для JS фреймворков
      ul
        li
          a.github(href="https://react-bootstrap.github.io") React Bootstrap
        li
          a(href="https://ng-bootstrap.github.io") ng-bootstrap
        li
          a(href="https://bootstrap-vue.js.org/") BootstrapVue
      p.next Эти библиотеки полностью переписаны под фреймворки!
    +slide({header: "", classes: ""})
      h2.label Что в нем хорошо
      ul
        li Типографика
        li Cемантика и a11y
        li Grid system
        li Responsive Web Design и Mobile First
        li Расширенная кроссбраузерность
    +slide({header: "", classes: ""})
      h2.shout.label Типографика
    +slide({header: "", classes: ""})
      h2.label Типографика
      p Простой кит по заголовкам и тексту
      ul
        li.next
          a(href="https://devinhunt.github.io/typebase.css/") typebase.css
        li.next
          a(href="https://matejlatin.github.io/Gutenberg/") Gutenberg
        li.next
          a(href="http://typeplate.com/") Typeplate
      +cover('pictures/typo1.jpg')
    +slide({header: "", classes: ""})
      h2.label Как применить?
      ul
        li Сделать UI Kit со стилями типографики
          +cover('pictures/typo2.jpg')
        li.next Типографика - основа стиля сайта
          +cover('pictures/typo3.jpg')
    +slide({header: "", classes: "no-page"})
      +cover('pictures/typo-example1.jpg')
      span.next
        +cover('pictures/typo-example2.jpg')
      span.next
        +cover('pictures/typo-example3.jpg')
    +slide({header: "", classes: ""})
      h2.shout.label Семантика и&nbsp;a11y
    +slide({header: "", classes: ""})
      h2.label Семантика
      ul
        li Не говорит использовать section или article
        li.next Но и не запрещает, так как стили на классах
      span.next
        +cover('pictures/semantic-hell.jpg')
    +slide({header: "", classes: ""})
      h2.label a11y
      ul
        li Базовые требования a11y
        li Присутствуют aria и role
      +cover('pictures/a11y.jpg')
    +slide({header: "", classes: ""})
      h2.label Как применить?
      ul
        li Задумываться о семантике и a11y
        li.next Верстать семантично
        li.next Проверять базовое a11y
    +slide({header: "", classes: "shout"})
      h2.label.shout Grid system
    +slide({header: "", classes: "no-page"})
      +cover('pictures/grids-yes.jpg')
    +slide({header: "", classes: ""})
      h2.label Grid system
      p Модульные сетки = визуальный порядок
      ul
        li.empty
          a(href="https://www.surgebook.com/egorkomarov/book/osnovi_web_dizaina/setka-grid-system") Сетка (Grid System), Егор Комаров
      +cover('pictures/grids1.jpg')
    +slide({header: "", classes: ""})
      +cover('pictures/grids.jpg')
    +slide({header: "", classes: ""})
      h2.label Как применить?
      ul
        li Рассказать дизайнеру о сетках
        li Начать использовать CSS Grid Layout
      ul
        li.empty.next
          a(href="https://codepen.io/lautsevich/pen/PRmPxv") CSS Grid Framework by Павел Ловцевич
    +slide({header: "", classes: ""})
      h2.shout.label RWD и MF
      p(style="margin-top: 320px; text-align: center") *Responsive Web Design и Mobile First
      span.next
        +cover('pictures/captain.jpg')
    +slide({header: "", classes: ""})
      h2.label Mobile First и Desktop First
      pre
        code.css
          | // Mobile First
          | @media (min-width: ...) { ... }
          | @media (min-height: ...) { ... }
      pre.next
        code.css
          | // Desktop First
          | @media (max-width: ...) { ... }
          | @media (max-height: ...) { ... }
    +slide({header: "", classes: ""})
      h2.label Как применить?
      ul
        li Начни делать Mobile First!
        li Мобильные - это важно!
        li Я серьезно, и дизанейру своем скажи!
    +slide({header: "", classes: ""})
      h2.shout.label Кроссбраузерность
    +slide({header: "", classes: ""})
      h2.label Кроссбраузерность
      ul
        li Браузер - неконтролируемая среда
        li Чем сложнее код, тем больше ошибок
        +cover('pictures/browsers.jpg')
    +slide({header: "", classes: ""})
      h2.label Как применить?
      ul
        li Начни тестировать свой код кроссбраузерно
        li Да, на реальных девайсах
        li Загляни в исходники Bootstrap за вдохновением
      p
        a(href="https://neesoglasnaja.github.io/moscowcss_11/") Тестирование фронтенда для разработчиков
    +slide({header: "Что в нем плохо", classes: ""})
      p Проблемы большого опенсорса
      p Сложность кастомизации
      p Отстутсвие методологии наименования
      p Зависимость от jQuery
    +slide({header: "Проблемы большого опенсорса", classes: ""})
      ul
        li Унификация
        li Инертность - новые фичи появляются не быстро
        li Отставание от стандартов
        li Хочешь кастом - пиши свое
    +slide({header: "Сложность кастомизации", classes: ""})
      p Правильная темизация интерфейса - нетривиальная задача
      p В CSS нет cкоупинга (ака изоляция стилей), но есть глобальная область видимости
      p Бутстрап позволяет кастомизировать базовую тем, но исходники в SASS
      p Поэтому все пишут просто стили поверх, раздувая кодовую базу и используя каскад и !important
    +slide({header: "неправильная кастомизация -> ненужные зависимости", classes: ""})
      p Не надо так!
      p Следите за зависимостями, используйте для этого инструменты
    +slide({header: "Отстутсвие методологии наименования", classes: ""})
      p Отстутсвие методологии -> каша в селекторах
      p классы-модификаторы / утилитарные классы
    +slide({header: "Зависимость от jQuery", classes: ""})
      p Понять, простить и ждать
      p В планах ее убрать, но пока так https://blog.getbootstrap.com/2019/02/11/bootstrap-4-3-0/
    +slide({header: "Делаем свой Oopstrap", classes: ""})
      p Любой проект, в котором использует компонентный подход к верстке, можно превратить в CSS фреймворк
    +slide({header: "Спойлер", classes: ""})
      p Плохой дизайн сложно превратить в хороший CSS фреймворк
    +slide({header: "Без хорошего UI Kit...", classes: ""})
      img(src="https://neesoglasnaja.github.io/moscowcss_11/pictures/ui-kit.jpg", width="100%")
    +slide({header: "...все будет ОЧЕНЬ ПЛОХО", classes: ""})
      img(src="https://neesoglasnaja.github.io/moscowcss_11/pictures/bad-code-2.jpg", width="100%")
    +slide({header: "Технологии", classes: ""})
      p HTML + CSS (PostCSS)
    +slide({header: "Препроцессоры vs PostCSS", classes: ""})
      p В 2019 можно и без препроцессоров
      p Пруф от 2018 года - http://frontendconf.ru/moscow-rit/2018/abstracts/3326
      р В большом проекте полностью сменить технологию не так-то и просто
      p Чем PostCSS лучше препроцессора? Нативностью и собственным выбором плагинов
    +slide({header: "Из чего состоит Oopstrap", classes: ""})
      ul
        li Документация
        li layouts & grid
        li Типографика и контент
        li Компоненты
        li Утилитарные классы
    +slide({header: "Документация", classes: ""})
      p davidhund/styleguide-generators
    +slide({header: "", classes: ""})
      p https://github.com/morishitter/postcss-style-guide
    +slide({header: "", classes: ""})
      img(src="https://github.com/morishitter/postcss-style-guide/raw/master/style-guide-default.png")
    +slide({header: "Устанавливаем границы", classes: ""})
    +slide({header: "Stylelint", classes: ""})
      p Ссылка на мой доклад
    +slide({header: "custom properties", classes: ""})
      p Более мощный инструмент, чем  переменные препроцессоров
      р Имеет каскадность и фоллбек
      p Классный кейс - адаптивные элементы UI kit
    +slide({header: "Запрет на анархию в переменных", classes: ""})
      p "It's allowed to use only \"var(--var)\" for different color (--color-NAME); font (--font-family-NAME, --font-size-NAME); line height (--line-height-NAME); border radius (--border-radius-NAME); and shadows (--shadow-NAME) props. You CAN use 'inherit' for colors, font-size, font-family and line-height. You CAN use 'none' for border-radius and shadows"
    +slide({header: "", classes: ""})
      img(src="https://neesoglasnaja.github.io/moscowcss_11/pictures/good-code.jpg", width="100%")
    +slide({header: "", classes: ""})
      p И нет, переменные это не про то, чтобы не копипастить код
      p Основная задача переменных - контроль над стилями "темы"
    +slide({header: "layouts & grid", classes: ""})
    +slide({header: "Эра flex", classes: ""})
      p Нужен только класс-контейнер (и то не всегда)
      p Высчитывать все эти колонки, остпуты... Долго и неинтересно!
    +slide({header: "css grid", classes: ""})
      p Создание сетки в несколько строк
      р Подержка браузеров позволяет использовать в проде https://caniuse.com/#feat=css-grid
    +slide({header: "css grid", classes: ""})
      p Пример с 12 колонками в несколько строк
      p Вот и не нужен подход с atomicCSS, когда стили пишутся классами в разметке
      p А еще гриды умеют в адаптив (пример как)
    +slide({header: "Типографика и контент", classes: ""})
      p Воруй как художник, если дизайнер это еще не сделал за тебя
      p Тулзы для подбора типографики
      p Можно и вертикальный ритм подключить, это не сложно
    +slide({header: "responsive images", classes: ""})
      p В Bootstrap есть поддержка тега picture - это круто
      p Но ничего не говорится от src-set, т.е. об адаптивных изображениях
      р А это классная техника уменьшения трафика пользователя
    +slide({header: "Компоненты", classes: ""})
      p Неужто сложно наверстать такие компоненты как...
      p Alerts, Badges, Buttons, Progress, Spinners и еще несколько десятков такой же ерунды?
    +slide({header: "А что про JS компоненты?", classes: ""})
      p Камон, ну что мало ли каруселек без jQuery, с a11y?
      p В редких проектах нужнен весь список доступных JS компонентов Bootstrap
      p А если и так, то они часто выглядят отнюдь не так, как в популярном фреймворке
    +slide({header: "dialog", classes: ""})
      р Полноценные модальный элемент
      p Пока сложно использовать из-за низкой поддержки https://caniuse.com/#feat=dialog
      р Доклад Ани Селезневой https://www.youtube.com/watch?v=s6PI8pKQxgo
    +slide({header: "Утилитарные класы", classes: ""})
      p Ресеты стилей
      p Простой повторяющийся код вынесен в переменные еще несколько этапов назад
      p Большинству проектов достаточно парочки таких классов как visibility-hidden, display-none и т.д.
      p А остальное - в утиль. Вот серьезно, зачему 20 классов border, если граница задается один свойством?! 
    +slide({header: "Вуаля!", classes: ""})
      p CSS библиотека, заточенная под конкретный проект
      p Со встроенной документацией
      p С конкретными примерами компонентов конкретного проекта
      p И это не исключает использования сторонних библиотек
    +slide({header: "Когда брать чужое?", classes: ""})
      ul
        li Разрабатывается быстрый прототип
        li Дизайн "заточен" под выбранную UI библиотеку
        li Нет дизайна
        li Вы не умеете верстать
        li Просто лень
    +slide({header: "Подводя итог", classes: ""})
      ul
        li Не ненавидьте библиотеки "потому что модно"
        li Пользуйтесь инструментами осознанно
        li Знайте возможности современных CSS, HTML и JS
        li Не переставайте учиться
    +slide({name: 'theend', header: "", classes: ''})
      p.end-link(style="position: absolute; bottom: 5%; background-color: #1b1b1b")
        a.bigger(href="http://bit.ly/" target="_blank") bit.ly/
        br
        | Александра Шинкевич (
        a(href='https://twitter.com/neesoglasnaja' target="_blank") @neesoglasnaja
        | )
      img.cover(src='pictures/end.jpg')

    .progress
    script(src='shower/shower.min.js')
    script(src='vendor/highlight.pack.js')
    script.
      hljs.initHighlightingOnLoad();
