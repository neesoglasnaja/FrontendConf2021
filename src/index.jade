include ./blocks/slide.jade
include ./blocks/cover.jade
include ./blocks/quote.jade
include ./blocks/frame.jade

- var title = "Тебе не нужен Bootstrap! Или нужен? Или все же не нужен?"

doctype html
html(lang='ru')
  head
    title !{title}
    meta(charset='utf-8')
    meta(http-equiv='x-ua-compatible', content='ie=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    link(rel='stylesheet', href='shower/themes/ribbon/styles/screen-16x9.css')
    link(rel='stylesheet', href='theme.css')
    link(rel='stylesheet', href='slides.css')
  body.shower.list
    header.caption
      h1 !{title}
    +slide({name: 'cover', classes:'cover'})
      +cover('pictures/cover.jpg')
    +slide({header: "", classes: ""})
      div(style="margin-left: 50%; width: 60%; margin-top: 100px")
        ul
          li Верстала еще на таблицах
          li Была начальником отдела фронтенда
          li Выгорела и уволилась
          li(style="text-decoration: line-through") Счастливая безработная
        p(style="margin-top: 40px")
          img.logo(src="pictures/minskcss.png")
          img.logo(src="pictures/minskjs.png")
          img.logo(src="pictures/css-minsk-js.svg", style="background-color: #2b2727; height: 75px")
      +cover('pictures/about-cover.jpg')
    +slide({header: "О чем расскажу", classes: ""})
      ul
        li Что такое Bootstrap, зачем появился и почему стал популярным
        li Чему полезному он научит
        li Когда от него отказаться
    +slide({header: "Что такое Bootstrap", classes: ""})
      p Библиотека компонентов для унификации интерфейса
    +slide({header: "Зачем появился?", classes: ""})
      p Чтобы унифицировать интерфейс одной отдельно взятой компании
      p Уход из твиттера - https://blog.getbootstrap.com/2012/09/29/onward/
    +slide({header: "Почему стал популярным", classes: ""})
      p просто, быстро и удобно копипастить
      p большой набор базовых, рутинных компонентов
      p Выглядит презентабельно из коробки
      p Это HTML, CSS и JS (jQuery)
    +slide({header: "Мой первый сайт на Bootstrap 2", classes: ""})
      p http://3d.miu.by/
      p Изначально был сделан "чистым", но была боль с кроссбраузерностью
      p 2013 год: поддержка ie6 как основного браузера
    +slide({header: "Версии для JS фреймворков", classes: ""})
      p React Bootstrap (https://react-bootstrap.github.io)
      p ng-bootstrap (https://ng-bootstrap.github.io)
      p BootstrapVue (https://bootstrap-vue.js.org/)
      p Но это полностью переписанные под фреймворки библиотеки компонентов!
    +slide({header: "Что в нем хорошо", classes: ""})
      p типографика
      p семантика и a11y
      p Grid system -> кто верстал флоутами, тот поймет
      p респонсив из коробки
      p расширенная кроссбраузерность
    +slide({header: "Типографика", classes: ""})
      p Простой кит по заголовкам и тексту
      p Аналогичные инструменты
      ul
        li Есть почти во всех аналогах
        li https://devinhunt.github.io/typebase.css/
        li https://matejlatin.github.io/Gutenberg/
        li http://typeplate.com/
      p Как применить на своем проекте? Сделать UI kit со стилями типографики, и использовать только их
    +slide({header: "Семантика и a11y", classes: ""})
      p Не говорит использовать section или article
      p Но и не запрещает, так как стили на классах
      p Базовые требования a11y  соотвествует, есть aria и role
      p Почему круто? Потому что благодаря копипасте не делаете совсем плохо
    +slide({header: "Grid system", classes: ""})
      p Макетные сетки -> визуальный порядок
      p https://www.surgebook.com/egorkomarov/book/osnovi_web_dizaina/setka-grid-system https://habr.com/ru/post/464115/
      p Вертикальный ритм - о нем мало кто вообще знает
      p Но это все про дизайн. С чего начать? Рассказать дизайнерам о такой штуке. Возможно, им понравится
    +slide({header: "респонсив из коробки + mobile first", classes: ""})
      p Как определить, mobile или desktop first? По медиа выражениям
      p min-width/min-height -> mobile
      p max-width/max-height -> desktop
      p почему подход крутой в 2019 году? Потому что http2 позволяет загружать небольшие бандлы эффективно
    +slide({header: "расширенная кроссбраузерность", classes: ""})
      p Почему круто? Когда другие годами правили баги кроссбраузерность, то можно и заглянуть в реализацию похожих компонентов
    +slide({header: "Что в нем плохо", classes: ""})
      p Проблемы большого опенсорса
      p Сложность кастомизации
      p Отстутсвие методологии наименования
      p Зависимость от jQuery
    +slide({header: "Проблемы большого опенсорса", classes: ""})
      ul
        li Унификация
        li Инертность - новые фичи появляются не быстро
        li Отставание от стандартов
        li Хочешь кастом - пиши свое
    +slide({header: "Сложность кастомизации", classes: ""})
      p Правильная темизация интерфейса - нетривиальная задача
      p В CSS нет cкоупинга (ака изоляция стилей), но есть глобальная область видимости
      p Бутстрап позволяет кастомизировать базовую тем, но исходники в SASS
      p Поэтому все пишут просто стили поверх, раздувая кодовую базу и используя каскад и !important
    +slide({header: "неправильная кастомизация -> ненужные зависимости", classes: ""})
      p Не надо так!
      p Следите за зависимостями, используйте для этого инструменты
    +slide({header: "Отстутсвие методологии наименования", classes: ""})
      p Отстутсвие методологии -> каша в селекторах
      p классы-модификаторы / утилитарные классы
    +slide({header: "Зависимость от jQuery", classes: ""})
      p Понять, простить и ждать
      p В планах ее убрать, но пока так https://blog.getbootstrap.com/2019/02/11/bootstrap-4-3-0/
    +slide({header: "Делаем свой Oopstrap", classes: ""})
    +slide({header: "Спойлер", classes: ""})
      p Плохой дизайн сложно превратить в хороший CSS фреймворк
    +slide({header: "Без хорошего UI Kit...", classes: ""})
      img(src="https://neesoglasnaja.github.io/moscowcss_11/pictures/ui-kit.jpg", width="100%")
    +slide({header: "...все будет ОЧЕНЬ ПЛОХО", classes: ""})
      img(src="https://neesoglasnaja.github.io/moscowcss_11/pictures/bad-code-2.jpg", width="100%")
    +slide({header: "Технологии", classes: ""})
      p HTML + CSS (PostCSS)
    +slide({header: "Препроцессоры vs PostCSS", classes: ""})
      p В 2019 можно и без препроцессоров
      p Пруф от 2018 года - http://frontendconf.ru/moscow-rit/2018/abstracts/3326
      р В большом проекте полностью сменить технологию не так-то и просто
      p Чем PostCSS лучше препроцессора? Нативностью и собственным выбором плагинов
    +slide({header: "Из чего состоит Oopstrap", classes: ""})
      ul
        li Документация
        li layouts & grid
        li Типографика и контент
        li Компоненты
        li Утилитарные классы
    +slide({header: "Документация", classes: ""})
      p davidhund/styleguide-generators
    +slide({header: "", classes: ""})
      p https://github.com/morishitter/postcss-style-guide
    +slide({header: "", classes: ""})
      img(src="https://github.com/morishitter/postcss-style-guide/raw/master/style-guide-default.png")
    +slide({header: "Устанавливаем границы", classes: ""})
    +slide({header: "Stylelint", classes: ""})
      p Ссылка на мой доклад
    +slide({header: "custom properties", classes: ""})
      p Более мощный инструмент, чем  переменные препроцессоров
      р Имеет каскадность и фоллбек
      p Классный кейс - адаптивные элементы UI kit
    +slide({header: "Запрет на анархию в переменных", classes: ""})
      p "It's allowed to use only \"var(--var)\" for different color (--color-NAME); font (--font-family-NAME, --font-size-NAME); line height (--line-height-NAME); border radius (--border-radius-NAME); and shadows (--shadow-NAME) props. You CAN use 'inherit' for colors, font-size, font-family and line-height. You CAN use 'none' for border-radius and shadows"
    +slide({header: "", classes: ""})
      img(src="https://neesoglasnaja.github.io/moscowcss_11/pictures/good-code.jpg", width="100%")
    +slide({header: "", classes: ""})
      p И нет, переменные это не про то, чтобы не копипастить код
      p Основная задача переменных - контроль над стилями "темы"
    +slide({header: "layouts & grid", classes: ""})
    +slide({header: "Эра flex", classes: ""})
      p Нужен только класс-контейнер (и то не всегда)
      p Высчитывать все эти колонки, остпуты... Долго и неинтересно!
    +slide({header: "css grid", classes: ""})
      p Создание сетки в несколько строк
      р Подержка браузеров позволяет использовать в проде https://caniuse.com/#feat=css-grid
    +slide({header: "css grid", classes: ""})
      p Пример с 12 колонками в несколько строк
      p Вот и не нужен подход с atomicCSS, когда стили пишутся классами в разметке
      p А еще гриды умеют в адаптив (пример как)
    +slide({header: "Типографика и контент", classes: ""})
      p Воруй как художник, если дизайнер это еще не сделал за тебя
      p Тулзы для подбора типографики
      p Можно и вертикальный ритм подключить, это не сложно
    +slide({header: "responsive images", classes: ""})
      p В Bootstrap есть поддержка тега picture - это круто
      p Но ничего не говорится от src-set, т.е. об адаптивных изображениях
      р А это классная техника уменьшения трафика пользователя
    +slide({header: "Компоненты", classes: ""})
      p Неужто сложно наверстать такие компоненты как...
      p Alerts, Badges, Buttons, Progress, Spinners и еще несколько десятков такой же ерунды?
    +slide({header: "А что про JS компоненты?", classes: ""})
      p Камон, ну что мало ли каруселек без jQuery, с a11y?
      p В редких проектах нужнен весь список доступных JS компонентов Bootstrap
      p А если и так, то они часто выглядят отнюдь не так, как в популярном фреймворке
    +slide({header: "dialog", classes: ""})
      р Полноценные модальный элемент
      p Пока сложно использовать из-за низкой поддержки https://caniuse.com/#feat=dialog
      р Доклад Ани Селезневой https://www.youtube.com/watch?v=s6PI8pKQxgo
    +slide({header: "Утилитарные класы", classes: ""})
      p Ресеты стилей
      p Простой повторяющийся код вынесен в переменные еще несколько этапов назад
      p Большинству проектов достаточно парочки таких классов как visibility-hidden, display-none и т.д.
      p А остальное - в утиль. Вот серьезно, зачему 20 классов border, если граница задается один свойством?! 
    +slide({header: "Вуаля!", classes: ""})
      p CSS библиотека, заточенная под конкретный проект
      p Со встроенной документацией
      p С конкретными примерами компонентов конкретного проекта
      p И это не исключает использования сторонних библиотек
    +slide({header: "Когда брать чужое?", classes: ""})
      ul
        li Разрабатывается быстрый прототип
        li Дизайн "заточен" под выбранную UI библиотеку
        li Нет дизайна
        li Вы не умеете верстать
        li Просто лень
    +slide({header: "Подводя итог", classes: ""})
      ul
        li Не ненавидьте библиотеки "потому что модно"
        li Пользуйтесь инструментами осознанно
        li Знайте возможности современных CSS, HTML и JS
        li Не переставайте учиться
    +slide({name: 'theend', header: "", classes: ''})
      p.end-link(style="position: absolute; bottom: 5%; background-color: #1b1b1b")
        a.bigger(href="http://bit.ly/" target="_blank") bit.ly/
        br
        | Александра Шинкевич (
        a(href='https://twitter.com/neesoglasnaja' target="_blank") @neesoglasnaja
        | )
      img.cover(src='pictures/end.jpg')

    .progress
    script(src='shower/shower.min.js')
